"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const theaterAuth_1 = require("../middleware/theaterAuth");
const controllers_1 = require("../../providers/controllers");
const thrRouter = express_1.default.Router();
thrRouter.post('/register', (req, res) => controllers_1.tController.theaterRegister(req, res));
thrRouter.post('/validateOTP', (req, res) => controllers_1.tController.validateTheaterOTP(req, res));
thrRouter.post('/login', (req, res) => controllers_1.tController.theaterLogin(req, res));
thrRouter.post('/resendOTP', (req, res) => controllers_1.tController.resendOTP(req, res));
thrRouter.get('/get/:theaterId', theaterAuth_1.theaterAuth, (req, res) => controllers_1.tController.getTheaterData(req, res));
thrRouter.get('/get/ChartData/:theaterId', theaterAuth_1.theaterAuth, (req, res) => controllers_1.ticketController.getChartData(req, res));
thrRouter.put('/update/:theaterId', theaterAuth_1.theaterAuth, (req, res) => controllers_1.tController.updateTheaterData(req, res));
thrRouter.get('/screens/:theaterId', theaterAuth_1.theaterAuth, (req, res) => controllers_1.scnController.findScreensInTheater(req, res));
thrRouter.post('/screens/add/:theaterId', theaterAuth_1.theaterAuth, (req, res) => controllers_1.scnController.saveScreen(req, res));
thrRouter.get('/screens/get/:screenId', theaterAuth_1.theaterAuth, (req, res) => controllers_1.scnController.findScreenById(req, res));
thrRouter.patch('/screens/edit/:screenId', theaterAuth_1.theaterAuth, (req, res) => controllers_1.scnController.updateScreenName(req, res));
thrRouter.delete('/screens/delete/:screenId', theaterAuth_1.theaterAuth, (req, res) => controllers_1.scnController.deleteScreen(req, res));
thrRouter.get('/screens/seat/:seatId', theaterAuth_1.theaterAuth, (req, res) => controllers_1.screenSeatController.findScreenSeatById(req, res));
thrRouter.put('/screens/seat/update/:seatId', theaterAuth_1.theaterAuth, (req, res) => controllers_1.screenSeatController.updateScreenSeat(req, res));
thrRouter.get('/screens/get/seats/:screenId', theaterAuth_1.theaterAuth, (req, res) => controllers_1.scnController.getAvailSeatsOnScreen(req, res));
thrRouter.get('/movies', theaterAuth_1.theaterAuth, (req, res) => controllers_1.mController.getMovies(req, res));
thrRouter.get('/movie/get/:movieId', theaterAuth_1.theaterAuth, (req, res) => controllers_1.mController.findMovieById(req, res));
thrRouter.get('/shows/:theaterId', theaterAuth_1.theaterAuth, (req, res) => controllers_1.showController.findShowsOnTheater(req, res));
thrRouter.get('/shows/first/:theaterId', theaterAuth_1.theaterAuth, (req, res) => controllers_1.showController.findFirstShowsOnTheater(req, res));
thrRouter.post('/show/add/:theaterId', theaterAuth_1.theaterAuth, (req, res) => controllers_1.showController.addShow(req, res));
thrRouter.get('/show/edit/:showId', theaterAuth_1.theaterAuth, (req, res) => controllers_1.showController.editShowGet(req, res));
thrRouter.post('/show/edit/:showId', theaterAuth_1.theaterAuth, (req, res) => controllers_1.showController.editShow(req, res));
thrRouter.delete('/show/delete/:showId', theaterAuth_1.theaterAuth, (req, res) => controllers_1.showController.deleteShow(req, res));
thrRouter.get('/chat/users/:theaterId', theaterAuth_1.theaterAuth, (req, res) => controllers_1.chatController.getUsersChattedWith(req, res));
thrRouter.get('/chat/history', theaterAuth_1.theaterAuth, (req, res) => controllers_1.chatController.getChatHistory(req, res));
thrRouter.get('/tickets/:theaterId', theaterAuth_1.theaterAuth, (req, res) => controllers_1.ticketController.getTicketsTheaters(req, res));
exports.default = thrRouter;
