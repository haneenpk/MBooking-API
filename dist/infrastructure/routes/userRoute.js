"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const userAuth_1 = require("../middleware/userAuth");
const controllers_1 = require("../../providers/controllers");
const multer_1 = __importDefault(require("../config/multer")); // Adjust import statement here
const userRouter = express_1.default.Router();
userRouter.post('/register', (req, res) => controllers_1.uController.userRegister(req, res));
userRouter.post('/validateOtp', (req, res) => controllers_1.uController.validateUserOTP(req, res));
userRouter.post('/resendOtp', (req, res) => controllers_1.uController.resendOTP(req, res));
userRouter.post('/login', (req, res) => controllers_1.uController.userLogin(req, res));
userRouter.patch('/update/profileimage/:userId', userAuth_1.userAuth, multer_1.default.single('profilePicture'), (req, res) => controllers_1.uController.updateUserProfileDp(req, res));
userRouter.patch('/remove/profileimage/:userId', userAuth_1.userAuth, (req, res) => controllers_1.uController.removeUserProfileDp(req, res));
userRouter.put('/update/:userId', userAuth_1.userAuth, (req, res) => controllers_1.uController.updateProfile(req, res));
userRouter.get('/get/:userId', userAuth_1.userAuth, (req, res) => controllers_1.uController.getUserData(req, res));
userRouter.get('/get/theater/:theaterId', userAuth_1.userAuth, (req, res) => controllers_1.tController.getTheaterData(req, res));
userRouter.get('/upcomings', userAuth_1.userAuth, (req, res) => controllers_1.upcController.getUpcomings(req, res));
userRouter.get('/upcoming/get/:upcomingId', userAuth_1.userAuth, (req, res) => controllers_1.upcController.findUpcomingById(req, res));
userRouter.get('/movies', userAuth_1.userAuth, (req, res) => controllers_1.showController.getMovies(req, res));
userRouter.get('/movie/get/:movieId', userAuth_1.userAuth, (req, res) => controllers_1.mController.findMovieById(req, res));
userRouter.get('/showTime', userAuth_1.userAuth, (req, res) => controllers_1.showController.getShows(req, res));
userRouter.get('/selectShowTime', userAuth_1.userAuth, (req, res) => controllers_1.showController.getSelectShows(req, res));
userRouter.get('/show/seat/:seatId', userAuth_1.userAuth, (req, res) => controllers_1.showSeatController.findShowSeatById(req, res));
userRouter.get('/all/theaters', userAuth_1.userAuth, (req, res) => controllers_1.tController.getAllTheater(req, res));
userRouter.get('/chat/theaters/:userId', userAuth_1.userAuth, (req, res) => controllers_1.chatController.getTheatersChattedWith(req, res));
userRouter.get('/chat/history', userAuth_1.userAuth, (req, res) => controllers_1.chatController.getChatHistory(req, res));
userRouter.post('/show/booking/hold', userAuth_1.userAuth, (req, res) => controllers_1.ticketController.holdSeats(req, res));
userRouter.get('/show/tempTicket/:tempTicketId', userAuth_1.userAuth, (req, res) => controllers_1.ticketController.getTempTicket(req, res));
userRouter.post('/booking/ticket/:tempTicketId', userAuth_1.userAuth, (req, res) => controllers_1.ticketController.confirmTicket(req, res));
userRouter.get('/booking/save/:tempTicketId', userAuth_1.userAuth, (req, res) => controllers_1.ticketController.saveTicket(req, res));
userRouter.get('/booking-history/:userId', userAuth_1.userAuth, (req, res) => controllers_1.ticketController.userTicketHistory(req, res));
userRouter.get('/ticket/cancel/:ticketId', userAuth_1.userAuth, (req, res) => controllers_1.ticketController.cancelTicket(req, res));
exports.default = userRouter;
